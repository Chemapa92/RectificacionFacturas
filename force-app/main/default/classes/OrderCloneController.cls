/**
 * @description Controller para clonar pedidos (Order__c)
 * @author Jos√© Mar√≠a Porras
 * @date 2025-09-30
 */
public with sharing class OrderCloneController {
    
    /**
     * @description Clona un pedido existente con los campos especificados y sus l√≠neas
     * @param originalOrderId ID del pedido original a clonar
     * @return ID del nuevo pedido clonado
     */
    @AuraEnabled(cacheable=false)
    public static String cloneOrder(String originalOrderId) {
        try {
            // Verificar que el usuario tenga permisos para crear pedidos
            if (!Schema.sObjectType.Order__c.isCreateable()) {
                throw new AuraHandledException('No tiene permisos para crear pedidos');
            }
            
            // Obtener el pedido original con todos los campos necesarios
            Order__c originalOrder = [
                SELECT Id, Name, OrderNumber__c, OrderDate__c, Account__c, 
                       Business__c, Store__c, Platform__c, PaymentMethod__c,
                       FinalAmount__c, TaxBase__c, Margin__c, Status__c,
                       Carrier__c, FreightDate__c, DeliveryNoteNumber__c,
                       InvoiceNumber__c, Proforma__c, Serie__c, A3Status__c,
                       PlantStatus__c, Sale15__c
                FROM Order__c 
                WHERE Id = :originalOrderId 
                WITH SECURITY_ENFORCED
                LIMIT 1
            ];
            
            // Crear el nuevo pedido clonado
            Order__c clonedOrder = originalOrder.clone(false, true, false, false);
            
            // Modificar campos espec√≠ficos para el pedido clonado
            clonedOrder.OrderNumber__c = null; // Se generar√° autom√°ticamente
            clonedOrder.OrderDate__c = Date.today();
            clonedOrder.Status__c = 'Nuevo'; // Estado inicial
            clonedOrder.A3Status__c = null;
            clonedOrder.PlantStatus__c = null;
            clonedOrder.DeliveryNoteNumber__c = null;
            clonedOrder.InvoiceNumber__c = null;
            clonedOrder.FreightDate__c = null;
            
            // Insertar el nuevo pedido
            insert clonedOrder;
            
            // Buscar y clonar las l√≠neas de pedido relacionadas
            cloneOrderLines(originalOrderId, clonedOrder.Id);
            
            return clonedOrder.Id;
            
        } catch (QueryException e) {
            throw new AuraHandledException('Error al obtener el pedido: ' + e.getMessage());
        } catch (DmlException e) {
            throw new AuraHandledException('Error al crear el pedido clonado: ' + e.getMessage());
        } catch (Exception e) {
            throw new AuraHandledException('Error inesperado: ' + e.getMessage());
        }
    }
    
    /**
     * @description Clona las l√≠neas de pedido relacionadas
     * @param originalOrderId ID del pedido original
     * @param clonedOrderId ID del pedido clonado
     */
    private static void cloneOrderLines(String originalOrderId, String clonedOrderId) {
        try {
            System.debug('=== INICIANDO CLONACI√ìN DE L√çNEAS DE PEDIDO ===');
            System.debug('Order ID original: ' + originalOrderId);
            System.debug('Order ID clonado: ' + clonedOrderId);
            
            // Usar el objeto correcto: OrderItem__c con el campo Pedido__c
            List<OrderItem__c> originalLines = [
                SELECT Id, Pedido__c, Name, ProductCode__c, ProductDescription__c, 
                       Quantity__c, UnitPrice__c, TotalAmount__c, BasePrice__c, 
                       BaseTotal__c, Margin__c, MinimalPrice__c, MinimalTotal__c
                FROM OrderItem__c 
                WHERE Pedido__c = :originalOrderId 
                WITH SECURITY_ENFORCED
            ];
            
            System.debug('L√≠neas encontradas: ' + originalLines.size());
            
            if (!originalLines.isEmpty()) {
                List<OrderItem__c> clonedLines = new List<OrderItem__c>();
                
                for (OrderItem__c originalLine : originalLines) {
                    OrderItem__c clonedLine = originalLine.clone(false, true, false, false);
                    clonedLine.Pedido__c = clonedOrderId;
                    clonedLines.add(clonedLine);
                    
                    System.debug('Clonando l√≠nea: ' + originalLine.Name + ' -> ' + clonedLine.Name);
                }
                
                insert clonedLines;
                System.debug('‚úÖ L√≠neas clonadas exitosamente: ' + clonedLines.size());
            } else {
                System.debug('‚ÑπÔ∏è  No hay l√≠neas de pedido para clonar');
            }
            
            System.debug('=== FIN DE CLONACI√ìN DE L√çNEAS ===');
        } catch (Exception e) {
            System.debug('‚ùå Error clonando l√≠neas de pedido: ' + e.getMessage());
            System.debug('Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error al clonar las l√≠neas de pedido: ' + e.getMessage());
        }
    }
    
    
    /**
     * @description Obtiene los detalles de un pedido para mostrar en el modal de confirmaci√≥n
     * @param orderId ID del pedido
     * @return Objeto Order__c con los campos necesarios
     */
    @AuraEnabled(cacheable=true)
    public static Order__c getOrderDetails(String orderId) {
        try {
            return [
                SELECT Id, Name, OrderNumber__c, OrderDate__c, Account__c, 
                       Business__c, Store__c, Platform__c, PaymentMethod__c,
                       FinalAmount__c, Status__c, CreatedDate
                FROM Order__c 
                WHERE Id = :orderId 
                WITH SECURITY_ENFORCED
                LIMIT 1
            ];
        } catch (Exception e) {
            throw new AuraHandledException('Error al obtener detalles del pedido: ' + e.getMessage());
        }
    }
    
    // Variables para la p√°gina Visualforce
    public String loadingMessage { get; set; }
    public String errorMessage { get; set; }
    
    /**
     * @description Constructor para la p√°gina Visualforce
     */
    public OrderCloneController() {
        // Constructor vac√≠o
    }
    
    /**
     * @description M√©todo de acci√≥n para la p√°gina Visualforce
     */
    public PageReference cloneOrder() {
        try {
            String originalOrderId = ApexPages.currentPage().getParameters().get('recordId');
            
            if (String.isBlank(originalOrderId)) {
                errorMessage = 'No se encontr√≥ el ID del pedido a clonar';
                return null;
            }
            
            loadingMessage = 'Clonando pedido...';
            
            // Ejecutar la clonaci√≥n
            String clonedOrderId = cloneOrder(originalOrderId);
            
            if (String.isNotBlank(clonedOrderId)) {
                // Redirigir al pedido clonado
                PageReference pageRef = new PageReference('/' + clonedOrderId);
                pageRef.setRedirect(true);
                return pageRef;
            } else {
                errorMessage = 'No se pudo crear el pedido clonado';
                return null;
            }
            
        } catch (Exception e) {
            errorMessage = 'Error al clonar el pedido: ' + e.getMessage();
            return null;
        }
    }
    
    /**
     * @description M√©todo de diagn√≥stico que devuelve informaci√≥n sobre las l√≠neas de pedido
     * @param orderId ID del pedido a diagnosticar
     * @return Informaci√≥n del diagn√≥stico
     */
    @AuraEnabled(cacheable=false)
    public static String diagnoseOrderLines(String orderId) {
        try {
            String result = '=== DIAGN√ìSTICO AVANZADO DE L√çNEAS DE PEDIDO ===\n';
            result += 'Order ID: ' + orderId + '\n\n';
            
            // Probar directamente con el objeto correcto: OrderItem__c
            result += 'üîç BUSCANDO L√çNEAS DE PEDIDO...\n';
            result += 'Probando con el objeto correcto: OrderItem__c\n\n';
            
            boolean found = false;
            
            try {
                // Contar registros
                String countQuery = 'SELECT COUNT() FROM OrderItem__c WHERE Pedido__c = :orderId';
                Integer totalCount = Database.countQuery(countQuery);
                
                if (totalCount > 0) {
                    result += '‚úÖ ¬°ENCONTRADO! Objeto "OrderItem__c" con campo "Pedido__c"\n';
                    result += '   Total de registros: ' + totalCount + '\n\n';
                    
                    // Obtener detalles de los primeros registros
                    List<OrderItem__c> detailResults = [
                        SELECT Id, Name, ProductCode__c, ProductDescription__c, 
                               Quantity__c, UnitPrice__c, TotalAmount__c
                        FROM OrderItem__c 
                        WHERE Pedido__c = :orderId 
                        LIMIT 5
                    ];
                    
                    result += '   Detalles de los primeros registros:\n';
                    for (OrderItem__c record : detailResults) {
                        result += '   - ID: ' + record.Id + ', Name: ' + record.Name + '\n';
                        result += '     Producto: ' + record.ProductDescription__c + '\n';
                        result += '     Cantidad: ' + record.Quantity__c + ', Precio: ' + record.UnitPrice__c + '\n';
                    }
                    found = true;
                } else {
                    result += '‚ÑπÔ∏è  No se encontraron l√≠neas de pedido en OrderItem__c\n';
                }
                
            } catch (Exception e) {
                result += '‚ùå Error consultando OrderItem__c: ' + e.getMessage() + '\n';
            }
            
            if (!found) {
                result += '‚ùå NO SE ENCONTRARON L√çNEAS DE PEDIDO\n';
                result += 'Posibles causas:\n';
                result += '1. No hay l√≠neas de pedido en este pedido espec√≠fico\n';
                result += '2. No hay permisos para acceder a las l√≠neas\n';
                result += '3. El pedido a√∫n no tiene l√≠neas asociadas\n';
            }
            
            result += '\n=== FIN DEL DIAGN√ìSTICO ===';
            return result;
            
        } catch (Exception e) {
            return 'Error en diagn√≥stico: ' + e.getMessage();
        }
    }

    @InvocableMethod(label='Clonar Pedido' description='Clona un pedido y todas sus l√≠neas de pedido relacionadas.')
    public static List<String> cloneOrderInvocable(List<String> orderIds) {
        List<String> results = new List<String>();
        for (String orderId : orderIds) {
            try {
                String clonedOrderId = cloneOrder(orderId);
                results.add(clonedOrderId);
            } catch (Exception e) {
                results.add('ERROR: ' + e.getMessage());
            }
        }
        return results;
    }
}